name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            os_short: win64
            c_compiler: gcc
            cpp_compiler: g++
            generator: -G "MinGW Makefiles"
            cpack_type: zip
          - os: ubuntu-latest
            os_short: linux
            c_compiler: gcc
            cpp_compiler: g++
            cpack_type: deb

    steps:
    - uses: actions/checkout@v4

    # Install dependencies on Ubuntu (Linux)
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake libboost-all-dev

    # Install MinGW on Windows (for cross-compilation)
    - name: Install MinGW
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw
        echo "C:/mingw64/tools/bin" >> $env:GITHUB_PATH
        gcc --version
        g++ --version
    - name: Install vcpkg and Boost (static)
      if: matrix.os == 'windows-latest'
      run: |
        # Клонируем репозиторий vcpkg
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install boost-filesystem boost-program-options:x64-windows-static
        echo "C:/vcpkg/installed/x64-windows-static/include" >> $env:GITHUB_PATH
        echo "C:/vcpkg/installed/x64-windows-static/lib" >> $env:GITHUB_PATH
    # Configure CMake
    - name: Configure CMake
      run: >
        cmake -B build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -S ${{ github.workspace }}

    # Build the project and package it
    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }}
        cmake --build build --target package --config ${{ matrix.build_type }}

    # Create a GitHub release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}-${{ matrix.os_short }}
        release_name: Release ${{ github.run_number }}-${{ matrix.os_short }}
        draft: false
        prerelease: false

    # Upload the packaged release asset
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/dublicate_boost-0.1.0-${{ matrix.os_short }}.${{ matrix.cpack_type }}
        asset_name: dublicate_boost-0.1.0-${{ matrix.os_short }}.${{ matrix.cpack_type }}
        asset_content_type: application/${{ matrix.cpack_type }}



    





    

