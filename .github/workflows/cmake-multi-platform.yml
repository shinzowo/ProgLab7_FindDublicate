name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            os_short: win64
            c_compiler: gcc
            cpp_compiler: g++
            generator: -G "MinGW Makefiles"
            cpack_type: zip
          - os: ubuntu-latest
            os_short: Linux
            c_compiler: gcc
            cpp_compiler: g++
            cpack_type: deb

    steps:
    - uses: actions/checkout@v4
    
    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        if ($env:RUNNER_OS -eq "Windows") {
          .\bootstrap-vcpkg.bat} 
        else {
        ./bootstrap-vcpkg.sh}
        cd..
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd vcpkg
        ./vcpkg install boost-filesystem boost-program-options:x64-linux-static
        echo "BOOST_DIR=/home/runner/vcpkg/installed/x64-linux" >> $GITHUB_ENV
        cd ..


    - name: Install MinGW and Boost (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd vcpkg
        .\vcpkg install boost-filesystem boost-program-options:x64-windows-static
        echo "BOOST_DIR=C:/vcpkg/installed/x64-windows-static" >> $GITHUB_ENV
        cd ..

    - name: Configure CMake
      run: |
        cmake -B . ${matrix.generator} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build . --config ${{ matrix.build_type }}
        cmake --build . --target package --config ${{ matrix.build_type }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}-${{ matrix.os_short }}
        release_name: Release ${{ github.run_number }}-${{ matrix.os_short }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dublicate_boost-0.1.0-${{ matrix.os_short }}.${{ matrix.cpack_type }}
        asset_name: dublicate_boost-0.1.0-${{ matrix.os_short }}.${{ matrix.cpack_type }}
        asset_content_type: application/${{ matrix.cpack_type }}



    





    

